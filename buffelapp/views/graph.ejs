<html>
<head>
  <title>NDVI Values in Pixel</title>
<script src="http://mbostock.github.com/d3/d3.v2.js"></script>
   <link rel="stylesheet" href="lib/leaflet/leaflet.css">
  <link rel="stylesheet" href="map.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
  <script
     src="https://code.jquery.com/jquery-3.3.1.js"
     integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
       crossorigin="anonymous"></script>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <style>
    /* tell the SVG path to be a thin blue line without any area fill */
    path {
    stroke: steelblue;
    stroke-width: 1;
    fill: none;
    }

    .axis {
    shape-rendering: crispEdges;
    }
    .x.axis line {
    stroke: lightgrey;
    }
    .x.axis .minor {
    stroke-opacity: .5;
    }
    .x.axis path {
    display: none;
    }
    .y.axis line, .y.axis path {
    fill: none;
    stroke: #000;
    }
    </style>

</head>
  <body>
    <div class="container">
      <div class="page-header">
	<h3>Graph Page</h3> 
      </div>
    </div>
    

    <div id="graph" class="aGraph" style="position:absolute;top:0px;left:0; float:left;"></div>








  </body>






  <script>
  var point1 = <%- point1 %>;
  var point2 = <%- point2 %>;
  var point3 = <%- point3 %>;
  var point4 = <%- point4 %>;
  var point5 = <%- point5 %>;
  var point6 = <%- point6 %>;
  var minDay = <%- minDay %>;
  var maxDay = <%- maxDay %>;
  var step = <%- step %>;
</script>
<!--<script type="text/javascript" src="graph.js"></script>-->


    <script>
      /* implementation heavily influenced by http://bl.ocks.org/1166403 */

      // define dimensions of graph
      var m = [80, 80, 80, 80]; // margins
      var w = 1200 - m[1] - m[3]; // width
      var h = 700 - m[0] - m[2]; // height
    
      // create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
      var data = [point1,point2,point3,point4,point5,point6];
      
      // X scale will fit all values from data[] within pixels 0-w
      var x = d3.scale.linear().domain([minDay, maxDay]).range([0, w]);
      // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
      var y = d3.scale.linear().domain([2000, 8000]).range([h, 0]);
      // automatically determining max range can work something like this
     // var y = d3.scale.linear().domain([0, 1.2*d3.max(data)]).range([h, 0]);
      // create a line function that can convert data[] into x and y points
      var line = d3.svg.line()
      // assign the X function to plot our line as we wish
      .x(function(d,i) {
      // verbose logging to show what's actually being done
      console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
      // return the X coordinate where we want to plot this datapoint
      return x(i*step+minDay);
      })
      .y(function(d) {
      // verbose logging to show what's actually being done
      console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
      // return the Y coordinate where we want to plot this datapoint
      return y(d);
      })
      // Add an SVG element with the desired dimensions and margin.
      var graph = d3.select("#graph").append("svg:svg")
      .attr("width", w + m[1] + m[3])
      .attr("height", h + m[0] + m[2])
      .append("svg:g")
      .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
      // create yAxis
      var xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(false);
      // Add the x-axis.
      graph.append("svg:g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + h + ")")
      .call(xAxis);
      // create left yAxis
      var yAxisLeft = d3.svg.axis().scale(y).ticks(4).orient("left");
      // Add the y-axis to the left
      graph.append("svg:g")
      .attr("class", "y axis")
      .attr("transform", "translate(-25,0)")
      .call(yAxisLeft);

      // Add the line by appending an svg:path element with the data line we created above
      // do this AFTER the axes above so that the line is above the tick-lines
      graph.append("svg:path").attr("d", line(data));

      </script>

</hmtl>
